<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox.Text" xml:space="preserve">
    <value>#version 450
layout (location = 0) out vec2 texcoord;
vec2 vertices[3];
out gl_PerVertex { 
    vec4 gl_Position;
};
void main() {
    vertices[0] = vec2( -1.0, -1.0);
    vertices[1] = vec2( 3.0,  -1.0);
    vertices[2] = vec2( -1.0,  3.0);
    gl_Position = vec4(vertices[gl_VertexIndex % 3], 0.0, 1.0);
    texcoord = vertices[gl_VertexIndex % 3];
};</value>
  </data>
  <data name="textBox1.Text" xml:space="preserve">
    <value>#version 450
layout (location = 0) out vec4 outColor;
layout (location = 0) in vec2 textCoords;
layout(std140, binding = 1) uniform buf{
	mat4 mvp;
	vec4 TimeXResolutionYZGlobalTimeW;
	vec4 MouseXYMouseButtonsZW;
	vec4 CalenderYMDS;
	vec4 UserValues1;
	vec4 UserValues2;
	vec4 iChannelTime;
	vec4 fromV;
	vec4 rightV;
	vec4 upV;
	vec4 centerV;
	vec3 iChannelResolution[4];
}ubuf;
vec3 iResolution;
float iTime;
float iGlobalTime;
float iTimeDelta;
float iFrame;
vec4 iMouse;
vec4 iDate;
float iSampleRate;
float iChannelTime[4];
vec3 iChannelResolution[4];
vec3 Rotate3X(vec3 v, float a)
{
	vec3 temp;
	temp.x = v.x;
	temp.y = (v.y * cos(a)) + (v.z * -sin(a));
	temp.z = (v.y * sin(a)) + (v.z * cos(a));
	return temp;
}
vec3 Rotate3Y(vec3 v, float a)
{
	vec3 temp;
	temp.x = (v.x * cos(a)) + (v.z * sin(a));
	temp.y = v.y;
	temp.z = (v.x * -sin(a)) + (v.z * cos(a));
	return temp;
}
vec3 Rotate3Z(vec3 v, float a)
{
	vec3 temp;
	temp.x = (v.x * cos(a)) + (v.y * -sin(a));
	temp.y = (v.x * sin(a)) + (v.y * cos(a));
	temp.z = v.z;
	return temp;
}
vec2 rotate(vec2 pos, float angle)
{
   float c = cos(angle);
   float s = sin(angle);
	
   return mat2(c, s, -s, c) * pos;
}
float plane(vec3 pos)
{
   return pos.y;
}
float sphere(vec3 pos, float radius)
{
   return length(pos) - radius;
}
float box(vec3 pos, vec3 size)
{
   return length(max(abs(pos) - size, 0.0));
}
float roundedBox(vec3 pos, vec3 size, float radius)
{
   return length(max(abs(pos) - size, 0.0)) - radius;
}
float map(vec3 pos)
{
   float planeDistance = plane(pos);
	
   pos.xy = Rotate3Z(pos, 100.0f * sin(iTime) * 0.01f).xy;
	
   pos.x = abs(pos.x);
   pos = mod(pos + 10.0, 20.0) - 10.0;
	
   pos.xy = Rotate3Z(pos, iTime).xy;
   pos.xz = Rotate3Y(pos, iTime * 0.7f).xz;
	
   if(iMouse.z &gt; 0.0)
       return min(planeDistance, roundedBox(pos, vec3(2.0), 1.0));
   else
       return min(planeDistance, sphere(pos, 3.0));
}
vec3 albedo(vec3 pos)
{
   return vec3(smoothstep(0.4, 0.41, fract(pos.x + sin(pos.z * 0.4 + iTime))));
}
// noun
// (physics) the proportion of the total light striking the surface of an object, 
// such as a planet, which is reflected from that surface
vec3 material(vec3 pos)
{
   return vec3(smoothstep(0.4, 0.41, fract(pos.x + sin(pos.z * 0.4 + iTime))));
	
}
vec3 computeNormal(vec3 pos)
{
   vec2 eps = vec2(0.01, 0.0);
   return normalize(vec3(
   map(pos + eps.xyy) - map(pos - eps.xyy), 
   map(pos + eps.yxy) - map(pos - eps.yxy), 
   map(pos + eps.yyx) - map(pos - eps.yyx)));
	
}
float diffuse(vec3 normal, vec3 lightDirection)
{
   // return max(dot(normal, lightDirection), 0.0);
   // wrap lighting
   return dot(normal, lightDirection) * 0.5 + 0.5;
}
float specular(vec3 normal, vec3 dir)
{
   // IBL
   vec3 h = normalize(normal - dir);
   return pow(max(dot(h, normal), 0.0), 100.0);
}

void main() {
vec2 fragCoord = vec2(textCoords.x / 2.0 + 0.5, textCoords.y / 2.0 + 0.5);
iResolution.xy = ubuf.TimeXResolutionYZGlobalTimeW.yz; 
iTime = ubuf.TimeXResolutionYZGlobalTimeW.w; 
iGlobalTime = iTime; 
iTimeDelta = ubuf.TimeXResolutionYZGlobalTimeW.x; 
iFrame = ubuf.UserValues1.x; 
iSampleRate = ubuf.UserValues1.y; 
iMouse = ubuf.MouseXYMouseButtonsZW; 
iDate = ubuf.CalenderYMDS; 
iChannelTime[0] = ubuf.iChannelTime.x; 
iChannelTime[1] = ubuf.iChannelTime.y; 
iChannelTime[2] = ubuf.iChannelTime.z; 
iChannelTime[3] = ubuf.iChannelTime.w; 
iChannelResolution[0] = ubuf.iChannelResolution[0]; 
iChannelResolution[1] = ubuf.iChannelResolution[1]; 
iChannelResolution[2] = ubuf.iChannelResolution[2]; 
iChannelResolution[3] = ubuf.iChannelResolution[3]; 
vec2 vViewCoord = fragCoord;
float fRatio = iResolution.y / iResolution.x;
//vViewCoord.y /= fRatio;

float uInc = 2.0 / (iResolution.x - 1.0);
float vInc = 2.0 / (iResolution.y - 1.0) * fRatio;
vec2 uv0 = vec2(vViewCoord.x * iResolution.x, vViewCoord.y * iResolution.y);
vec2 uv = vec2((uv0.x - (iResolution.x / 2.0)) * uInc, ((iResolution.y / 2.0) - uv0.y) * vInc);

vec3 pos = ubuf.fromV.xyz;
//vec3 pos = vec3(sin(iTime * 0.2) * 4.0, 5.0 + sin(iTime * 0.4) * 3.0, -13.0);
//vec3 dir = normalize(vec3(uv, 1.0));

vec3 rdir = vec3(ubuf.centerV.x + uv.x * ubuf.rightV.x + uv.y * ubuf.upV.x,"
				  ubuf.centerV.y + uv.x * ubuf.rightV.y + uv.y * ubuf.upV.y,"
				  ubuf.centerV.z + uv.x * ubuf.rightV.z + uv.y * ubuf.upV.z);

vec3 dir = normalize(rdir);

// Ray March 
float posDistance = 0.0;
for(int i = 0;i &lt; 64;i++)
{
    float d = map(pos);
	 posDistance += d;
    pos += d * dir;
}

vec3 normal = computeNormal(pos);

vec3 lightPos = vec3(0.0, 100.0, -100.0);
vec3 dirToLight = normalize(lightPos - pos);
vec3 posToLight = pos + (0.001 * dirToLight);

float fShadowBias = 0.05;
float fStartDistance = fShadowBias / abs(dot(dirToLight, normal));
float fLightDistance = 100.0;
float fLength = fLightDistance - fStartDistance;

float posToLightDistance = 0.0;
for(int i = 0;i &lt; 64;i++)
{
    float d = map(posToLight);
    posToLightDistance += d;
    posToLight += d * dirToLight;
}

float fShadow = step(0.0, posToLightDistance) * step(fLightDistance, posToLightDistance);		

float fAmbientOcclusion = 1.0;

float fDist = 0.0;
for(int i = 0;i &lt;= 5;i++)
{
    fDist += 0.1;

    float d = map(pos + normal * fDist);

    fAmbientOcclusion *= 1.0 - max(0.0,(fDist - d) * 0.2 / fDist);
}

// get colour from reflected ray
float fSeparation = 0.1;
fLength = 160.0;

vec3 dirReflected = reflect(dir, normal);
fStartDistance = fSeparation / abs(dot(dirReflected, normal));

vec3 posReflected = pos + (0.001 * dirReflected);

float posReflectedDistance = 0.0;
for(int i = 0;i &lt; 64;i++)
{
    float d = map(posReflected);
    posReflectedDistance += d;
    posReflected += d * dirReflected;
}

float fReflected = step(0.0, posReflectedDistance) * step(fLength, posReflectedDistance);

float diffReflected = diffuse(normal, dirReflected);
float specReflected = specular(normal, dir);

vec3 colorReflected = (diffReflected + specReflected) * vec3(0.0, 0.2, 0.81) * (1.0 - fReflected) * material(posReflected);

float diff = diffuse(normal, dirToLight);
float spec = specular(normal, dir);
vec3 color = (diff + spec) * vec3(0.0, 0.2, 0.81) *  material(pos);

float fogFactor = exp(-posDistance * 0.01);
vec3 fogColor = vec3(0.0, 0.2, 0.81);

color = mix(clamp(color + colorReflected, 0.0,1.0), clamp(color + colorReflected, 0.0,1.0) * 0.25, 1.0 - fShadow);
color = mix(fogColor, fAmbientOcclusion * color, fogFactor);

//color = abs(dirReflected);
//color = abs(dirToLight);
//color = abs(normal);
//color = vec3(fAmbientOcclusion);
//color = colorReflected;
outColor = vec4(color, 1.0);
};</value>
  </data>
</root>